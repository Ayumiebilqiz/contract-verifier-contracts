;; Sources registry smart contract (based on nft collection)

;; storage scheme
;; storage#_ verifier_registry_address:MsgAddress
;;           source_item_code:^Cell
;;           = Storage;
#pragma version >=0.2.0;
#include "imports/stdlib.fc";
#include "imports/params.fc";

const int op::deploy_source_item = 1002;
const int op::change_verifier_registry = 2003;
const int op::change_admin = 3004;
const int op::set_source_item_code = 4005;
const int op::set_code = 5006;
const int error::invalid_cell_code = 902;
const int error::too_much_value = 901;
const int error::not_enough_value = 900;
const int error::access_denied = 401;
const int error::unknown_op = 0xffff;

const int max_tons = 1000000000;
const int min_tons = 500000000;

(slice, slice, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return (
    ds~load_msg_addr(), ;; admin
    ds~load_msg_addr(), ;; verifier_registry_address
    ds~load_ref() ;; source_item_code
  );
}

() save_data(slice admin_address, slice verifier_registry_address, cell source_item_code) impure inline {
  set_data(begin_cell()
    .store_slice(admin_address)
    .store_slice(verifier_registry_address)
    .store_ref(source_item_code)
    .end_cell());
}

cell calculate_source_item_state_init(int verifier_id, int verified_code_cell_hash, cell source_item_code) {
  cell data = begin_cell().store_uint(verifier_id, 256).store_uint(verified_code_cell_hash, 256).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(source_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_source_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() deploy_source_item(int verifier_id, int verified_code_cell_hash, cell source_item_code, cell source_content) impure {
  cell state_init = calculate_source_item_state_init(verifier_id, verified_code_cell_hash, source_item_code);
  slice source_address = calculate_source_item_address(workchain(), state_init);
  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(source_address)
            .store_coins(0)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(source_content);
  send_raw_message(msg.end_cell(), 64);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
    
  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }
  slice sender_address = cs~load_msg_addr();

  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);

  var (admin, verifier_registry, source_item_code) = load_data();

  if (op == op::deploy_source_item) {
    throw_unless(error::access_denied, equal_slices(sender_address, verifier_registry));
    throw_if(error::too_much_value, msg_value > max_tons);
    throw_if(error::not_enough_value, msg_value < min_tons);
    int verifier_id = in_msg_body~load_uint(256);
    int verified_code_cell_hash = in_msg_body~load_uint(256);
    cell source_content = in_msg_body~load_ref();
    in_msg_body.end_parse();
    deploy_source_item(verifier_id, verified_code_cell_hash, source_item_code, source_content);
    return ();
  }

  if (op == op::change_verifier_registry) {
    throw_unless(error::access_denied, equal_slices(sender_address, admin));
    slice new_verifier_registry = in_msg_body~load_msg_addr();
    in_msg_body.end_parse();
    save_data(admin, new_verifier_registry, source_item_code);
    return ();
  }
  
  if (op == op::change_admin) {
    throw_unless(error::access_denied, equal_slices(sender_address, admin));
    slice new_admin = in_msg_body~load_msg_addr();
    in_msg_body.end_parse();
    save_data(new_admin, verifier_registry, source_item_code);
    return ();
  }
  
  if (op == op::set_source_item_code) {
    throw_unless(error::access_denied, equal_slices(sender_address, admin));
    cell new_source_item_code = in_msg_body~load_ref();
    throw_if(error::invalid_cell_code, new_source_item_code.begin_parse().slice_empty?());
    save_data(admin, verifier_registry, new_source_item_code);
    in_msg_body.end_parse();
    return ();
  }

  if (op == op::set_code) {
    throw_unless(error::access_denied, equal_slices(sender_address, admin));
    cell new_code = in_msg_body~load_ref();
    throw_if(error::invalid_cell_code, new_code.begin_parse().slice_empty?());
    in_msg_body.end_parse();
    set_code(new_code);
    return ();
  }

  throw(error::unknown_op);
}

;; Get methods
slice get_source_item_address(int verifier_id, int verified_code_cell_hash) method_id {
  var (_, _, source_item_code) = load_data();
  cell state_init = calculate_source_item_state_init(verifier_id, verified_code_cell_hash, source_item_code);
  return calculate_source_item_address(workchain(), state_init);
}

slice get_verifier_registry_address() method_id {
  var (_, verifier_registry, _) = load_data();
  return verifier_registry;
}

slice get_admin_address() method_id {
  var (admin, _, _) = load_data();
  return admin;
}